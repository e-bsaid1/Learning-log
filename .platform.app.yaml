name: "ll_project" # Nom de notre projet 
type: "python:3.10" # Version de Python utilisé 

relationships: # Services dont notre projet a besoin (ici la base de données postgresql)
    database: "db:postgresql"

# The configuration of the app when it's exposed to the web.
web:
  upstream:
      socket_family: unix
  commands:
    # Dit à Platform.sh quels processus (ici gunicorn) utiliser pour servir les requêtes à venir
    ## Remplace python manage.py runserver 
    start: "gunicorn -w 4 -b unix:$SOCKET ll_project.wsgi:application" 
  # Demande à Python où envoyer les requêtes à venir 
  locations: 
    "/":
        passthru: true
    "/static":
      root: "static"
      expires: 1h
      allow: true

# The size of the persistent disk of the application (in MB).
disk: 512

# Règle les directories où nous pouvons lire et écrire des données pendant que le projet tourne 
mounts: 
  "logs":
    source: local
    source_path: logs

# The hooks executed at various points in the lifecycle of the application.
hooks: 
  # Installe tous les paquêts nécessaire pour se servir du projet en ligne 
  # Collecte tous les fiches statiques nécessaire pour le projet dans un seul endroit 
  build: |
    pip install --upgrade pip
    pip install -r requirements.txt
    pip install -r requirements_remote.txt

    mkdir logs
    python manage.py collectstatic 
    rm -rf logs
  # Spécifie que les migrations doivent tourner chaque fois que le projet est déployé 
  deploy: |
    python manage.py migrate
